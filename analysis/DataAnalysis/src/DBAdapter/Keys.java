/**
 * This class is generated by jOOQ
 */
package DBAdapter;

/**
 * This class is generated by jOOQ.
 *
 * A class modelling foreign key relationships between tables of the <code>MI_WS1314</code> 
 * schema
 */
@javax.annotation.Generated(value    = { "http://www.jooq.org", "3.2.0" },
                            comments = "This class is generated by jOOQ")
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final org.jooq.Identity<DBAdapter.tables.records.CategoriesRecord, java.lang.Integer> IDENTITY_CATEGORIES = Identities0.IDENTITY_CATEGORIES;
	public static final org.jooq.Identity<DBAdapter.tables.records.EmployeesRecord, java.lang.Integer> IDENTITY_EMPLOYEES = Identities0.IDENTITY_EMPLOYEES;
	public static final org.jooq.Identity<DBAdapter.tables.records.TagsRecord, java.lang.Integer> IDENTITY_TAGS = Identities0.IDENTITY_TAGS;
	public static final org.jooq.Identity<DBAdapter.tables.records.TweetsHochwasserRecord, java.lang.Long> IDENTITY_TWEETS_HOCHWASSER = Identities0.IDENTITY_TWEETS_HOCHWASSER;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesRecord> KEY_CATEGORIES_PRIMARY = UniqueKeys0.KEY_CATEGORIES_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesRecord> KEY_CATEGORIES_INDEX_CATEGORIES_ON_NAME = UniqueKeys0.KEY_CATEGORIES_INDEX_CATEGORIES_ON_NAME;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesTrainingTweetsRecord> KEY_CATEGORIES_TRAINING_TWEETS_PRIMARY = UniqueKeys0.KEY_CATEGORIES_TRAINING_TWEETS_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesTrainingTweetsRecord> KEY_CATEGORIES_TRAINING_TWEETS_TEXT_UNIQUE = UniqueKeys0.KEY_CATEGORIES_TRAINING_TWEETS_TEXT_UNIQUE;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesTweetsRecord> KEY_CATEGORIES_TWEETS_PRIMARY = UniqueKeys0.KEY_CATEGORIES_TWEETS_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.EmployeesRecord> KEY_EMPLOYEES_PRIMARY = UniqueKeys0.KEY_EMPLOYEES_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.GeodbChangelogRecord> KEY_GEODB_CHANGELOG_PRIMARY = UniqueKeys0.KEY_GEODB_CHANGELOG_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.GeodbLocationsRecord> KEY_GEODB_LOCATIONS_PRIMARY = UniqueKeys0.KEY_GEODB_LOCATIONS_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.GeodbTypeNamesRecord> KEY_GEODB_TYPE_NAMES_TYPE_ID = UniqueKeys0.KEY_GEODB_TYPE_NAMES_TYPE_ID;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.InformationRecord> KEY_INFORMATION_PRIMARY = UniqueKeys0.KEY_INFORMATION_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TagsRecord> KEY_TAGS_PRIMARY = UniqueKeys0.KEY_TAGS_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TagsRecord> KEY_TAGS_INDEX_TAGS_ON_NAME = UniqueKeys0.KEY_TAGS_INDEX_TAGS_ON_NAME;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TagsTweetsRecord> KEY_TAGS_TWEETS_PRIMARY = UniqueKeys0.KEY_TAGS_TWEETS_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsHochwasserRecord> KEY_TWEETS_HOCHWASSER_PRIMARY = UniqueKeys0.KEY_TWEETS_HOCHWASSER_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsHochwasserRecord> KEY_TWEETS_HOCHWASSER_ID_UNIQUE = UniqueKeys0.KEY_TWEETS_HOCHWASSER_ID_UNIQUE;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSturmRecord> KEY_TWEETS_STURM_PRIMARY = UniqueKeys0.KEY_TWEETS_STURM_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSturmRecord> KEY_TWEETS_STURM_ID_UNIQUE = UniqueKeys0.KEY_TWEETS_STURM_ID_UNIQUE;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSyriaRecord> KEY_TWEETS_SYRIA_PRIMARY = UniqueKeys0.KEY_TWEETS_SYRIA_PRIMARY;
	public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSyriaRecord> KEY_TWEETS_SYRIA_ID_UNIQUE = UniqueKeys0.KEY_TWEETS_SYRIA_ID_UNIQUE;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends org.jooq.impl.AbstractKeys {
		public static org.jooq.Identity<DBAdapter.tables.records.CategoriesRecord, java.lang.Integer> IDENTITY_CATEGORIES = createIdentity(DBAdapter.tables.Categories.CATEGORIES, DBAdapter.tables.Categories.CATEGORIES.ID);
		public static org.jooq.Identity<DBAdapter.tables.records.EmployeesRecord, java.lang.Integer> IDENTITY_EMPLOYEES = createIdentity(DBAdapter.tables.Employees.EMPLOYEES, DBAdapter.tables.Employees.EMPLOYEES.ID);
		public static org.jooq.Identity<DBAdapter.tables.records.TagsRecord, java.lang.Integer> IDENTITY_TAGS = createIdentity(DBAdapter.tables.Tags.TAGS, DBAdapter.tables.Tags.TAGS.ID);
		public static org.jooq.Identity<DBAdapter.tables.records.TweetsHochwasserRecord, java.lang.Long> IDENTITY_TWEETS_HOCHWASSER = createIdentity(DBAdapter.tables.TweetsHochwasser.TWEETS_HOCHWASSER, DBAdapter.tables.TweetsHochwasser.TWEETS_HOCHWASSER.ID);
	}

	private static class UniqueKeys0 extends org.jooq.impl.AbstractKeys {
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesRecord> KEY_CATEGORIES_PRIMARY = createUniqueKey(DBAdapter.tables.Categories.CATEGORIES, DBAdapter.tables.Categories.CATEGORIES.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesRecord> KEY_CATEGORIES_INDEX_CATEGORIES_ON_NAME = createUniqueKey(DBAdapter.tables.Categories.CATEGORIES, DBAdapter.tables.Categories.CATEGORIES.NAME);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesTrainingTweetsRecord> KEY_CATEGORIES_TRAINING_TWEETS_PRIMARY = createUniqueKey(DBAdapter.tables.CategoriesTrainingTweets.CATEGORIES_TRAINING_TWEETS, DBAdapter.tables.CategoriesTrainingTweets.CATEGORIES_TRAINING_TWEETS.TEXT);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesTrainingTweetsRecord> KEY_CATEGORIES_TRAINING_TWEETS_TEXT_UNIQUE = createUniqueKey(DBAdapter.tables.CategoriesTrainingTweets.CATEGORIES_TRAINING_TWEETS, DBAdapter.tables.CategoriesTrainingTweets.CATEGORIES_TRAINING_TWEETS.TEXT);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.CategoriesTweetsRecord> KEY_CATEGORIES_TWEETS_PRIMARY = createUniqueKey(DBAdapter.tables.CategoriesTweets.CATEGORIES_TWEETS, DBAdapter.tables.CategoriesTweets.CATEGORIES_TWEETS.CATEGORY_ID, DBAdapter.tables.CategoriesTweets.CATEGORIES_TWEETS.TWEET_ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.EmployeesRecord> KEY_EMPLOYEES_PRIMARY = createUniqueKey(DBAdapter.tables.Employees.EMPLOYEES, DBAdapter.tables.Employees.EMPLOYEES.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.GeodbChangelogRecord> KEY_GEODB_CHANGELOG_PRIMARY = createUniqueKey(DBAdapter.tables.GeodbChangelog.GEODB_CHANGELOG, DBAdapter.tables.GeodbChangelog.GEODB_CHANGELOG.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.GeodbLocationsRecord> KEY_GEODB_LOCATIONS_PRIMARY = createUniqueKey(DBAdapter.tables.GeodbLocations.GEODB_LOCATIONS, DBAdapter.tables.GeodbLocations.GEODB_LOCATIONS.LOC_ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.GeodbTypeNamesRecord> KEY_GEODB_TYPE_NAMES_TYPE_ID = createUniqueKey(DBAdapter.tables.GeodbTypeNames.GEODB_TYPE_NAMES, DBAdapter.tables.GeodbTypeNames.GEODB_TYPE_NAMES.TYPE_ID, DBAdapter.tables.GeodbTypeNames.GEODB_TYPE_NAMES.TYPE_LOCALE);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.InformationRecord> KEY_INFORMATION_PRIMARY = createUniqueKey(DBAdapter.tables.Information.INFORMATION, DBAdapter.tables.Information.INFORMATION.TWEET_ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TagsRecord> KEY_TAGS_PRIMARY = createUniqueKey(DBAdapter.tables.Tags.TAGS, DBAdapter.tables.Tags.TAGS.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TagsRecord> KEY_TAGS_INDEX_TAGS_ON_NAME = createUniqueKey(DBAdapter.tables.Tags.TAGS, DBAdapter.tables.Tags.TAGS.NAME);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TagsTweetsRecord> KEY_TAGS_TWEETS_PRIMARY = createUniqueKey(DBAdapter.tables.TagsTweets.TAGS_TWEETS, DBAdapter.tables.TagsTweets.TAGS_TWEETS.TWEET_ID, DBAdapter.tables.TagsTweets.TAGS_TWEETS.TAG_ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsHochwasserRecord> KEY_TWEETS_HOCHWASSER_PRIMARY = createUniqueKey(DBAdapter.tables.TweetsHochwasser.TWEETS_HOCHWASSER, DBAdapter.tables.TweetsHochwasser.TWEETS_HOCHWASSER.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsHochwasserRecord> KEY_TWEETS_HOCHWASSER_ID_UNIQUE = createUniqueKey(DBAdapter.tables.TweetsHochwasser.TWEETS_HOCHWASSER, DBAdapter.tables.TweetsHochwasser.TWEETS_HOCHWASSER.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSturmRecord> KEY_TWEETS_STURM_PRIMARY = createUniqueKey(DBAdapter.tables.TweetsSturm.TWEETS_STURM, DBAdapter.tables.TweetsSturm.TWEETS_STURM.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSturmRecord> KEY_TWEETS_STURM_ID_UNIQUE = createUniqueKey(DBAdapter.tables.TweetsSturm.TWEETS_STURM, DBAdapter.tables.TweetsSturm.TWEETS_STURM.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSyriaRecord> KEY_TWEETS_SYRIA_PRIMARY = createUniqueKey(DBAdapter.tables.TweetsSyria.TWEETS_SYRIA, DBAdapter.tables.TweetsSyria.TWEETS_SYRIA.ID);
		public static final org.jooq.UniqueKey<DBAdapter.tables.records.TweetsSyriaRecord> KEY_TWEETS_SYRIA_ID_UNIQUE = createUniqueKey(DBAdapter.tables.TweetsSyria.TWEETS_SYRIA, DBAdapter.tables.TweetsSyria.TWEETS_SYRIA.ID);
	}


}

